#!/bin/bash

usage() {
	PROG=`basename $0`
	echo "Usage: $PROG [duration_s]"
	echo "Disable RaspberryPi HDMI port after xscreensaver starts."
	echo "Example: $PROG 300"
	echo ""
	echo "Options:"
	echo "  -h, --help   This help text"
}

export XAUTHORITY=/home/pi/.Xauthority
export DISPLAY=":0"
export XAUTHLOCALHOSTNAME=localhost

scriptPath=$(dirname $(readlink -f $0))

if [[ "-h" == "$1" || "--help" == "$1" ]] ; then
	usage
	exit
fi
DURATION_S=300
if [[ "" != "$1" && $1 =~ ^[0-9]+$ ]] ; then
	DURATION_S=$1
fi

TEMPFILE=`tempfile --prefix=hdmi. --suffix=.pid`
echo 0 > $TEMPFILE

interrupt_potential_sleeping_processes() {
    SLEEP_PID=0
    if [ -a $TEMPFILE ] ; then
        SLEEP_PID=`cat $TEMPFILE`
    fi
    if [ "0" != "$SLEEP_PID" ] ; then
        echo 0 > $TEMPFILE
        kill -SIGHUP $SLEEP_PID
    fi
}

hdmi_off() {
    "$scriptPath/xscreensaver-pi-hdmi-off"
}


hdmi_on() {
    # get the current state of HDMI output
    tvservice --status | grep -qE 'DMT|CEA|HDMI'
    RESULT=$?

    # if HDMI was not found, RESULT=1 ... turn it back on
    if [ "$RESULT" -eq 1 ] ; then
        "$scriptPath/xscreensaver-pi-hdmi-on"
    fi
}

# failsafe to make sure monitor stays on in case of quit
hdmi_on_exit() {
    interrupt_potential_sleeping_processes
    rm $TEMPFILE
    hdmi_on
    exit
}

trap 'hdmi_on_exit' SIGQUIT SIGINT SIGTERM
trap '' SIGHUP # ignore this signal

hdmi_on

# see fancy process substitution down below
while read line ; do
    if [[ $line =~ ^BLANK || $line =~ ^LOCK ]] ; then
        (
            # Start a subprocess timer to turn off the display if the timer expires.
            # The subprocess watches for SIGHUP signal to terminal early.
            # So a killall -SIGHUP xscreensaver-pi-hdmi will kill any subrocesses
            # but not the parent process.
            # $BASHPID seems to be more accurate than $! or $$.
            trap 'exit' SIGHUP
            echo $BASHPID > $TEMPFILE    # write this subprocess id so we can kill it
            sleep $DURATION_S            #    in case UNBLANK occurs before we turn off
            hdmi_off
            echo 0 > $TEMPFILE           # subprocess is done
        ) &
    fi
    if [[ $line =~ ^UNBLANK ]] ; then
        # prevent a "blanking" process from turning off the display if an "unblank"
        interrupt_potential_sleeping_processes
        hdmi_on
    fi
done < <( xscreensaver-command --watch )

hdmi_on_exit
